using System.Text.Json;
using UserLibrary;
using TestLibrary;

namespace StepHoot_C_;

class StepHoot : IStepHoot
{
    public static readonly string Path = "users.json"; 
    
    public void Registration(User? user)
    {
        if (user == null)
            throw new ArgumentNullException($"User is null");

        if (GetUserByLogin(user.Login) != null || GetUserByPhone(user.Phone) != null)
            throw new InvalidOperationException("User must be unique");

        if (!UserHelper.IsCorrectUser(user))
            throw new ArgumentException("Invalid User");

        if (File.ReadAllLines(Path).Length == 0)
            user.IsAdmin = true;
            
        File.AppendAllText(Path, JsonSerializer.Serialize(user) + '\n');
    }

    public User? Login(User? user)
    {
        if (user == null)
            throw new ArgumentNullException($"User is null");

        var correctUser = GetUser(user);

        return correctUser?.Password == user.Password ? correctUser : null;
    }

    public void RemoveUser(User? user)
    {
        if (user == null)
            throw new ArgumentNullException($"User is null");

        if (GetUser(user) == null)
            throw new InvalidOperationException("User not found");

        var usersStr = File.ReadAllLines(Path);
        var users = new List<string>();
        
        foreach (var userStr in usersStr)
        {
            var deserializedUser = JsonSerializer.Deserialize<User>(userStr);

            if (user.Login != deserializedUser?.Login)
                users.Add(userStr); 
        }

        File.WriteAllLines(Path, users.ToArray());
    }

    public void AddTestCategory(TestCategory category)
    {
        
    }
    
    private User? GetUser(User user)
    {
        var usersStr = File.ReadAllLines(Path);

        // Generated by Rider, Гы
        // LINQ метод сначала преобразует каждый элемент usersStr в User,
        // затем фильтрует псевдо-коллекцию чтоб были только User-ы, ибо Deserialize может вернуть null,
        // далее FirstOrDefault ищет User-a, всё :)
        return usersStr.Select(userStr =>
            JsonSerializer.Deserialize<User>(userStr)).OfType<User>().FirstOrDefault(deserializedUser =>
            user.Login == deserializedUser.Login);
    }
    
    // public static User? GetUserByIndex(int index)
    // {
    //     if (string.IsNullOrEmpty(login))
    //         throw new ArgumentNullException($"Login is null or empty");
    //     
    //     var usersStr = File.ReadAllLines(Path);
    //     
    //     return usersStr.Select(userStr =>
    //         JsonSerializer.Deserialize<User>(userStr)).OfType<User>().FirstOrDefault(deserializedUser =>
    //         login == deserializedUser.Login);
    // }
}