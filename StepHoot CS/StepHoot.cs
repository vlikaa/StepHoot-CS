using System.Text.Json;
using UserLibrary;

namespace StepHoot_C_;

class StepHoot : IStepHoot
{
    private readonly string _path = "users.json"; 
    
    public void Registration(User? user)
    {
        if (user == null)
            throw new ArgumentNullException($"User is null");

        if (GetUser(user) != null)
            throw new InvalidOperationException("User.Login is repeated");

        if (!UserHelper.IsCorrectUser(user))
            throw new ArgumentException("Invalid User");
        
        File.AppendAllText(_path, JsonSerializer.Serialize(user) + '\n');
    }

    public User? Login(User? user)
    {
        if (user == null)
            throw new ArgumentNullException($"User is null");
        
        return GetUser(user);
    }

    private User? GetUser(User user)
    {
        var usersStr = File.ReadAllLines(_path);

        // Generated by Rider, Гы
        // LINQ метод сначала преобразует каждый элемент usersStr в User,
        // затем фильтрует псевдо-коллекцию чтоб были только User-ы, ибо Deserialize может вернуть null,
        // далее FirstOrDefault ищет User-a, всё :)
        return usersStr.Select(userStr =>
            JsonSerializer.Deserialize<User>(userStr)).OfType<User>().FirstOrDefault(deserializedUser =>
            user.Login == deserializedUser.Login);
    }
    
}